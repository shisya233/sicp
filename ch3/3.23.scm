;node implement
(define (make-node val) (cons val (cons '() '())))
(define (val node) (car node))
(define (left node) (cadr node))
(define (right node) (cddr node))
(define (set-val! node val) (set-car! node val))
(define (set-left! node anode) (set! (cadr node) anode))
(define (set-right! node anode) (set! (cddr node) anode))

(define (front-ptr queue) (car queue))
(define (rear-ptr queue) (cdr queue))
(define (set-front-ptr! queue item) 
  (set-car! queue item))
(define (set-rear-ptr! queue item) 
  (set-cdr! queue item))
(define (empty-queue? queue) 
  (and (null? (rear-ptr queue))
       (null? (front-ptr queue))))
(define (make-queue) (cons '() '()))
(define (front-queue queue)
  (if (empty-queue? queue)
    (error "FRONT called with an 
           empty queue" queue)
    (val (front-ptr queue))))
(define (rear-queue queue)
  (if (empty-queue? queue)
    (error "REAR called with an 
           empty queue" queue)
    (val (rear-ptr queue))))
(define (front-insert-queue! queue item)
  (let ((new-pair (make-node item)))
    (cond ((empty-queue? queue)
           (set-front-ptr! queue new-pair)
           (set-rear-ptr! queue new-pair)
           queue)
          (else (set-right! new-pair (front-ptr queue))
                (set-front-ptr! queue new-pair)
                queue))))
(define (front-delete-queue! queue)
  (cond ((empty-queue? queue)
         (error "DELETE! called with 
                an empty queue" queue))
        ((eq? (front-ptr queue)
              (rear-ptr queue))
         (set-front-ptr! queue '())
         (set-rear-ptr! queue '()))
        (else (set-front-ptr! 
                queue 
                (right (front-ptr queue)))
              queue)))
(define (rear-insert-queue! queue item)
  (let ((new-pair (make-node item)))
    (cond ((empty-queue? queue)
           (set-front-ptr! queue new-pair)
           (set-rear-ptr! queue new-pair)
           queue)
          (else (set-right! (rear-ptr queue) 
                            new-pair)
                (set-rear-ptr! queue new-pair)
                queue))))
(define (rear-delete-queue! queue)
  (cond ((empty-queue? queue)
         (error "DELETE! called with 
                an empty queue" queue))
        ((eq? (front-ptr queue)
              (rear-ptr queue))
         (set-front-ptr! queue '())
         (set-rear-ptr! queue '()))
        (else (set-rear-ptr! 
                queue 
                (left (rear-ptr queue)))
              queue)))

;test
;(define q (make-queue))
;(front-insert-queue! q 'abc)
;(front-insert-queue! q 'bcd)
;(rear-insert-queue! q 'wahaha)
;(front-queue q)
;;'print
;(rear-queue q)
;;'print
