(define (variable? x) (symbol? x))
(define (same-variable? v1 v2) 
  (and (variable? v1) (variable? v2) (eq? v1 v2)))
(define (=number? n num) (and (number? n) (eq? n num)))
(define (make-sum n1 n2)
  (cond ((=number? n1 0) n2)
        ((=number? n2 0) n1)
        ((and (number? n1) (number? n2)) (+ n1 n2))
        (else (list '+ n1 n2))))
(define (make-product m1 m2)
  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1) (number? m2)) (* m1 m2))
        (else (list '* m1 m2))))
(define (sum? x)
  (and (pair? x) (eq? (car x) '+)))
(define (addend s) (cadr s)) 
(define (augend s) (caddr s)) 
(define (product? x)
  (and (pair? x) (eq? (car x) '*)))
(define (multiplier p) (cadr p))
(define (multiplicand p) (caddr p))
(define (exponentiation? ex) (eq? (car ex) '**))
(define (base ex) (cadr ex))
(define (exponent ex) (caddr ex))
(define (make-exponentiation b e) 
  (cond ((=number? e 0) 1)
        ((=number? e 1) b)
        ((and (number? b) (number? e)) (expt b e))
        (else (list '** b e))))

(define (deriv ex var)
  (cond ((number? ex) 0)
        ((variable? ex) (if (same-variable? ex var) 1 0))
        ((exponentiation? ex)
         (make-product (make-product (exponent ex) (make-exponentiation (base ex) (- (exponent ex) 1)))
                       (deriv (base ex) var)))
        ((sum? ex) (make-sum (deriv (addend ex) var) (deriv (augend ex) var)))
        ((product? ex) (make-sum (make-product (deriv (multiplier ex) var) (multiplicand ex))
                                 (make-product (deriv (multiplicand ex) var) (multiplier ex))))
        (else (error "unknown expression 
        type: DERIV" exp))))

;test
;(deriv (list '+ 2 'x) 'x)
;;1
;(deriv '(+ x 3) 'x)
;;1
;(deriv '(* x y) 'x)
;;'y
;(deriv '(* (* x y) (+ x 3)) 'x)
;;'print
;(deriv (make-exponentiation (list '* 4 'x) 2) 'x)
;;'print
