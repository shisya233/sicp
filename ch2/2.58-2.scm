(define (variable? x) (symbol? x))
(define (same-variable? v1 v2) 
  (and (variable? v1) (variable? v2) (eq? v1 v2)))
(define (=number? n num) (and (number? n) (eq? n num)))
(define (make-sum n1 n2)
  (cond ((=number? n1 0) n2)
        ((=number? n2 0) n1)
        ((and (number? n1) (number? n2)) (+ n1 n2))
        (else (list n1 '+ n2))))
(define (make-product m1 m2)
  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1) (number? m2)) (* m1 m2))
        (else (list m1 '* m2))))
(define (is? symbol ex)
  (or (and (pair? ex) (eq? (car ex) symbol))
      (and (not (null? (cddr ex))) (is? symbol (cdr ex)))))
(define (left symbol ex)
  (define (iter ex ans)
    (if (eq? (car ex) symbol)
      ans
      (iter (cdr ex) (append ans (list (car ex)))))) 
  (let ((ans (iter ex '())))
    (if (null? (cdr ans)) (car ans) ans)))
(define (right symbol ex)
  (define (iter ex)
    (if (eq? (car ex) symbol)
      (cdr ex)
      (iter (cdr ex))))
  (let ((ans (iter ex)))
    (if (null? (cdr ans)) (car ans) ans)))
(define (sum? x) (is? '+ x))
(define (addend s) (left '+ s))
(define (augend s) (right '+ s))
(define (product? x) (is? '* x))
(define (multiplier p) (left '* p))
(define (multiplicand p) (right '* p))
(define (exponentiation? ex) (eq? (cadr ex) '**))
(define (base ex) (car ex))
(define (exponent ex) (caddr ex))
(define (make-exponentiation b e) 
  (cond ((=number? e 0) 1)
        ((=number? e 1) b)
        ((and (number? b) (number? e)) (expt b e))
        (else (list b '** e))))

(define (deriv ex var)
  (cond ((number? ex) 0)
        ((variable? ex) (if (same-variable? ex var) 1 0))
        ((exponentiation? ex)
         (make-product (make-product (exponent ex) (make-exponentiation (base ex) (- (exponent ex) 1)))
                       (deriv (base ex) var)))
        ((sum? ex) (make-sum (deriv (addend ex) var) (deriv (augend ex) var)))
        ((product? ex) (make-sum (make-product (deriv (multiplier ex) var) (multiplicand ex))
                                 (make-product (deriv (multiplicand ex) var) (multiplier ex))))
        (else (error "unknown expression 
        type: DERIV" exp))))

;test
;(define a '(d * 2))
;(define b '(x + 4 * 9))
;(product? a)
;;#t
;(product? b)
;;#t
;(multiplier a)
;;'d
;(multiplicand a)
;;2
;(multiplier b)
;;'(x + 4)
;(multiplicand b)
;;9
;(define c '(x + 3 * (x + y + 2)))
;(deriv c 'x)
;;4
